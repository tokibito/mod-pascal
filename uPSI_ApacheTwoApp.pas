unit uPSI_ApacheTwoApp;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_ApacheTwoApp = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TApacheTwoApplication(CL: TPSPascalCompiler);
procedure SIRegister_ApacheTwoApp(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_ApacheTwoApp_Routines(S: TPSExec);
procedure RIRegister_TApacheTwoApplication(CL: TPSRuntimeClassImporter);
procedure RIRegister_ApacheTwoApp(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   HTTPD2
  ,ApacheTwoHTTP
  ,HTTPApp
  ,WebBroker
  ,ApacheTwoApp
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_ApacheTwoApp]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TApacheTwoApplication(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TWebApplication', 'TApacheTwoApplication') do
  with CL.AddClassN(CL.FindClass('TWebApplication'),'TApacheTwoApplication') do
  begin
    RegisterMethod('Function ProcessRequest( var r : request_rec) : Integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ApacheTwoApp(CL: TPSPascalCompiler);
begin
  SIRegister_TApacheTwoApplication(CL);
 //CL.AddDelphiFunction('Procedure set_module( defModule : Pmodule)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_ApacheTwoApp_Routines(S: TPSExec);
begin
 //S.RegisterDelphiFunction(@set_module, 'set_module', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TApacheTwoApplication(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TApacheTwoApplication) do
  begin
    RegisterMethod(@TApacheTwoApplication.ProcessRequest, 'ProcessRequest');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ApacheTwoApp(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TApacheTwoApplication(CL);
end;

 
 
{ TPSImport_ApacheTwoApp }
(*----------------------------------------------------------------------------*)
procedure TPSImport_ApacheTwoApp.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_ApacheTwoApp(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_ApacheTwoApp.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_ApacheTwoApp(ri);
  RIRegister_ApacheTwoApp_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
