unit uPSI_HTTPApp;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_HTTPApp = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TWebResponse(CL: TPSPascalCompiler);
procedure SIRegister_TCookieCollection(CL: TPSPascalCompiler);
procedure SIRegister_TCookie(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractWebRequestFile(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractWebRequestFiles(CL: TPSPascalCompiler);
procedure SIRegister_TContentParser(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractContentParser(CL: TPSPascalCompiler);
procedure SIRegister_TWebRequest(CL: TPSPascalCompiler);
procedure SIRegister_HTTPApp(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_HTTPApp_Routines(S: TPSExec);
procedure RIRegister_TWebResponse(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCookieCollection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCookie(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractWebRequestFile(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractWebRequestFiles(CL: TPSRuntimeClassImporter);
procedure RIRegister_TContentParser(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractContentParser(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWebRequest(CL: TPSRuntimeClassImporter);
procedure RIRegister_HTTPApp(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Masks
  ,Contnrs
  ,HTTPApp
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_HTTPApp]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebResponse(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TWebResponse') do
  with CL.AddClassN(CL.FindClass('TObject'),'TWebResponse') do
  begin
    RegisterMethod('Constructor Create( HTTPRequest : TWebRequest)');
    RegisterMethod('Function GetCustomHeader( const Name : string) : String');
    RegisterMethod('Procedure SendResponse');
    RegisterMethod('Procedure SendRedirect( const URI : AnsiString)');
    RegisterMethod('Procedure SendStream( AStream : TStream)');
    RegisterMethod('Function Sent : Boolean');
    RegisterMethod('Procedure SetCookieField( Values : TStrings; const ADomain, APath : AnsiString; AExpires : TDateTime; ASecure : Boolean)');
    RegisterMethod('Procedure SetCustomHeader( const Name, Value : string)');
    RegisterProperty('Cookies', 'TCookieCollection', iptr);
    RegisterProperty('HTTPRequest', 'TWebRequest', iptr);
    RegisterProperty('Version', 'AnsiString', iptrw);
    RegisterProperty('ReasonString', 'AnsiString', iptrw);
    RegisterProperty('Server', 'AnsiString', iptrw);
    RegisterProperty('WWWAuthenticate', 'AnsiString', iptrw);
    RegisterProperty('Realm', 'AnsiString', iptrw);
    RegisterProperty('Allow', 'AnsiString', iptrw);
    RegisterProperty('Location', 'AnsiString', iptrw);
    RegisterProperty('ContentEncoding', 'AnsiString', iptrw);
    RegisterProperty('ContentType', 'AnsiString', iptrw);
    RegisterProperty('ContentVersion', 'AnsiString', iptrw);
    RegisterProperty('DerivedFrom', 'AnsiString', iptrw);
    RegisterProperty('Title', 'AnsiString', iptrw);
    RegisterProperty('StatusCode', 'Integer', iptrw);
    RegisterProperty('ContentLength', 'Integer', iptrw);
    RegisterProperty('Date', 'TDateTime', iptrw);
    RegisterProperty('Expires', 'TDateTime', iptrw);
    RegisterProperty('LastModified', 'TDateTime', iptrw);
    RegisterProperty('RawContent', 'AnsiString', iptrw);
    RegisterProperty('Content', 'string', iptrw);
    RegisterProperty('ContentStream', 'TStream', iptrw);
    RegisterProperty('LogMessage', 'string', iptrw);
    RegisterProperty('CustomHeaders', 'TStrings', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCookieCollection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollection', 'TCookieCollection') do
  with CL.AddClassN(CL.FindClass('TCollection'),'TCookieCollection') do
  begin
    RegisterMethod('Constructor Create( WebResponse : TWebResponse; ItemClass : TCollectionItemClass)');
    RegisterMethod('Function Add : TCookie');
    RegisterProperty('WebResponse', 'TWebResponse', iptr);
    RegisterProperty('Items', 'TCookie Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCookie(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCollectionItem', 'TCookie') do
  with CL.AddClassN(CL.FindClass('TCollectionItem'),'TCookie') do
  begin
    RegisterProperty('Name', 'AnsiString', iptrw);
    RegisterProperty('Value', 'AnsiString', iptrw);
    RegisterProperty('Domain', 'AnsiString', iptrw);
    RegisterProperty('Path', 'AnsiString', iptrw);
    RegisterProperty('Expires', 'TDateTime', iptrw);
    RegisterProperty('Secure', 'Boolean', iptrw);
    RegisterProperty('HeaderValue', 'AnsiString', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractWebRequestFile(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TAbstractWebRequestFile') do
  with CL.AddClassN(CL.FindClass('TObject'),'TAbstractWebRequestFile') do
  begin
    RegisterProperty('FieldName', 'AnsiString', iptr);
    RegisterProperty('FileName', 'AnsiString', iptr);
    RegisterProperty('Stream', 'TStream', iptr);
    RegisterProperty('ContentType', 'AnsiString', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractWebRequestFiles(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TAbstractWebRequestFiles') do
  with CL.AddClassN(CL.FindClass('TObject'),'TAbstractWebRequestFiles') do
  begin
    RegisterProperty('Items', 'TAbstractWebRequestFile Integer', iptr);
    SetDefaultPropery('Items');
    RegisterProperty('Count', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TContentParser(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAbstractContentParser', 'TContentParser') do
  with CL.AddClassN(CL.FindClass('TAbstractContentParser'),'TContentParser') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractContentParser(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TAbstractContentParser') do
  with CL.AddClassN(CL.FindClass('TObject'),'TAbstractContentParser') do
  begin
    RegisterMethod('Constructor Create( AWebRequest : TWebRequest)');
    RegisterMethod('Function CanParse( AWebRequest : TWebRequest) : Boolean');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWebRequest(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TWebRequest') do
  with CL.AddClassN(CL.FindClass('TObject'),'TWebRequest') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function ReadClient( var Buffer, Count : Integer) : Integer');
    RegisterMethod('Function ReadString( Count : Integer) : AnsiString');
    RegisterMethod('Function ReadUnicodeString( Count : Integer) : string');
    RegisterMethod('Function TranslateURI( const URI : string) : string');
    RegisterMethod('Function WriteClient( var Buffer, Count : Integer) : Integer');
    RegisterMethod('Function WriteString( const AString : AnsiString) : Boolean');
    RegisterMethod('Function WriteHeaders( StatusCode : Integer; const ReasonString, Headers : AnsiString) : Boolean');
    RegisterMethod('Procedure ExtractFields( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings);');
    RegisterMethod('Procedure ExtractFields( Separators, WhiteSpace : TSysCharSet; const Content : AnsiString; Strings : TStrings);');
    RegisterMethod('Procedure ExtractContentFields( Strings : TStrings)');
    RegisterMethod('Procedure ExtractCookieFields( Strings : TStrings)');
    RegisterMethod('Procedure ExtractQueryFields( Strings : TStrings)');
    RegisterMethod('Function GetFieldByName( const Name : AnsiString) : AnsiString');
    RegisterProperty('MethodType', 'TMethodType', iptr);
    RegisterProperty('ContentParser', 'TAbstractContentParser', iptr);
    RegisterProperty('ContentFields', 'TStrings', iptr);
    RegisterProperty('CookieFields', 'TStrings', iptr);
    RegisterProperty('QueryFields', 'TStrings', iptr);
    RegisterProperty('Method', 'AnsiString', iptr);
    RegisterProperty('ProtocolVersion', 'AnsiString', iptr);
    RegisterProperty('URL', 'AnsiString', iptr);
    RegisterProperty('Query', 'AnsiString', iptr);
    RegisterProperty('PathInfo', 'AnsiString', iptr);
    RegisterProperty('PathTranslated', 'AnsiString', iptr);
    RegisterProperty('Authorization', 'AnsiString', iptr);
    RegisterProperty('CacheControl', 'AnsiString', iptr);
    RegisterProperty('Cookie', 'AnsiString', iptr);
    RegisterProperty('Date', 'TDateTime', iptr);
    RegisterProperty('Accept', 'AnsiString', iptr);
    RegisterProperty('From', 'AnsiString', iptr);
    RegisterProperty('Host', 'AnsiString', iptr);
    RegisterProperty('IfModifiedSince', 'TDateTime', iptr);
    RegisterProperty('Referer', 'AnsiString', iptr);
    RegisterProperty('UserAgent', 'AnsiString', iptr);
    RegisterProperty('ContentEncoding', 'AnsiString', iptr);
    RegisterProperty('ContentType', 'AnsiString', iptr);
    RegisterProperty('ContentLength', 'Integer', iptr);
    RegisterProperty('ContentVersion', 'AnsiString', iptr);
    RegisterProperty('RawContent', 'AnsiString', iptr);
    RegisterProperty('Content', 'string', iptr);
    RegisterProperty('Connection', 'AnsiString', iptr);
    RegisterProperty('DerivedFrom', 'AnsiString', iptr);
    RegisterProperty('Expires', 'TDateTime', iptr);
    RegisterProperty('Title', 'AnsiString', iptr);
    RegisterProperty('RemoteAddr', 'AnsiString', iptr);
    RegisterProperty('RemoteHost', 'AnsiString', iptr);
    RegisterProperty('ScriptName', 'AnsiString', iptr);
    RegisterProperty('ServerPort', 'Integer', iptr);
    RegisterProperty('InternalPathInfo', 'AnsiString', iptr);
    RegisterProperty('InternalScriptName', 'AnsiString', iptr);
    RegisterProperty('Files', 'TAbstractWebRequestFiles', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_HTTPApp(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('sDateFormat','String').SetString( '"%s", dd "%s" yyyy hh:nn:ss');
 CL.AddConstantN('MAX_STRINGS','LongInt').SetInt( 12);
 CL.AddConstantN('MAX_INTEGERS','LongInt').SetInt( 1);
 CL.AddConstantN('MAX_DATETIMES','LongInt').SetInt( 3);
  (*CL.AddTypeS('TWebExceptionEvent', 'Procedure ( Sender : TObject; E : Exceptio'
   +'n; var Handled : Boolean)');  *)
  CL.AddTypeS('TMethodType', '( mtAny, mtGet, mtPut, mtPost, mtHead )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TWebResponse');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractContentParser');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractWebRequestFiles');
  SIRegister_TWebRequest(CL);
  SIRegister_TAbstractContentParser(CL);
  SIRegister_TContentParser(CL);
  //CL.AddTypeS('TContentParserClass', 'class of TAbstractContentParser');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractWebRequestFile');
  SIRegister_TAbstractWebRequestFiles(CL);
  SIRegister_TAbstractWebRequestFile(CL);
  SIRegister_TCookie(CL);
  SIRegister_TCookieCollection(CL);
  SIRegister_TWebResponse(CL);
 CL.AddDelphiFunction('Function DosPathToUnixPath( const Path : string) : string');
 CL.AddDelphiFunction('Function HTTPDecode( const AStr : AnsiString) : AnsiString');
 CL.AddDelphiFunction('Function HTTPEncode( const AStr : AnsiString) : AnsiString');
 CL.AddDelphiFunction('Function HTMLEncode( const AStr : String) : String');
 CL.AddDelphiFunction('Function HTMLDecode( const AStr : String) : String');
 CL.AddDelphiFunction('Function ParseDate( const DateStr : string) : TDateTime');
 //CL.AddDelphiFunction('Procedure ExtractHTTPFields( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings; StripQuotes : Boolean);');
 //CL.AddDelphiFunction('Procedure ExtractHTTPFields( Separators, WhiteSpace : TSysCharSet; const Content : AnsiString; Strings : TStrings; StripQuotes : Boolean);');
 //CL.AddDelphiFunction('Procedure ExtractHeaderFields( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings; Decode : Boolean; StripQuotes : Boolean);');
 //CL.AddDelphiFunction('Procedure ExtractHeaderFields( Separators, WhiteSpace : TSysCharSet; const Content : AnsiString; Strings : TStrings; Decode : Boolean; StripQuotes : Boolean);');
 CL.AddDelphiFunction('Function StatusString( StatusCode : Integer) : AnsiString');
 CL.AddDelphiFunction('Function UnixPathToDosPath( const Path : string) : string');
 CL.AddDelphiFunction('Function MonthStr( DateTime : TDateTime) : string');
 CL.AddDelphiFunction('Function DayOfWeekStr( DateTime : TDateTime) : string');
 //CL.AddDelphiFunction('Function EncodingFromContentType( const AContentType : AnsiString) : TEncoding');
 CL.AddDelphiFunction('Function EncodingGetString( const AContentType : AnsiString; const AValue : AnsiString) : string');
 //CL.AddDelphiFunction('Function EncodingGetBytes( const AContentType : AnsiString; const AValue : string) : TBytes');
 //CL.AddDelphiFunction('Procedure RegisterContentParser( AClass : TContentParserClass)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Procedure ExtractHeaderFields_P( Separators, WhiteSpace : TSysCharSet; const Content : AnsiString; Strings : TStrings; Decode : Boolean; StripQuotes : Boolean); overload;
Begin HTTPApp.ExtractHeaderFields(Separators, WhiteSpace, Content, Strings, Decode, StripQuotes); END;

(*----------------------------------------------------------------------------*)
Procedure ExtractHeaderFields_P( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings; Decode : Boolean; StripQuotes : Boolean); overload;
Begin HTTPApp.ExtractHeaderFields(Separators, WhiteSpace, Content, Strings, Decode, StripQuotes); END;

(*----------------------------------------------------------------------------*)
Procedure ExtractHTTPFields_P( Separators, WhiteSpace : TSysCharSet; const Content : AnsiString; Strings : TStrings; StripQuotes : Boolean); overload;
Begin HTTPApp.ExtractHTTPFields(Separators, WhiteSpace, Content, Strings, StripQuotes); END;

(*----------------------------------------------------------------------------*)
Procedure ExtractHTTPFields_P( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings; StripQuotes : Boolean);  overload;
Begin HTTPApp.ExtractHTTPFields(Separators, WhiteSpace, Content, Strings, StripQuotes); END;

(*----------------------------------------------------------------------------*)
procedure TWebResponseCustomHeaders_W(Self: TWebResponse; const T: TStrings);
begin Self.CustomHeaders := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseCustomHeaders_R(Self: TWebResponse; var T: TStrings);
begin T := Self.CustomHeaders; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLogMessage_W(Self: TWebResponse; const T: string);
begin Self.LogMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLogMessage_R(Self: TWebResponse; var T: string);
begin T := Self.LogMessage; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentStream_W(Self: TWebResponse; const T: TStream);
begin Self.ContentStream := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentStream_R(Self: TWebResponse; var T: TStream);
begin T := Self.ContentStream; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContent_W(Self: TWebResponse; const T: string);
begin Self.Content := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContent_R(Self: TWebResponse; var T: string);
begin T := Self.Content; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseRawContent_W(Self: TWebResponse; const T: AnsiString);
begin Self.RawContent := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseRawContent_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.RawContent; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLastModified_W(Self: TWebResponse; const T: TDateTime);
begin Self.LastModified := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLastModified_R(Self: TWebResponse; var T: TDateTime);
begin T := Self.LastModified; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseExpires_W(Self: TWebResponse; const T: TDateTime);
begin Self.Expires := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseExpires_R(Self: TWebResponse; var T: TDateTime);
begin T := Self.Expires; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseDate_W(Self: TWebResponse; const T: TDateTime);
begin Self.Date := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseDate_R(Self: TWebResponse; var T: TDateTime);
begin T := Self.Date; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentLength_W(Self: TWebResponse; const T: Integer);
begin Self.ContentLength := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentLength_R(Self: TWebResponse; var T: Integer);
begin T := Self.ContentLength; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseStatusCode_W(Self: TWebResponse; const T: Integer);
begin Self.StatusCode := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseStatusCode_R(Self: TWebResponse; var T: Integer);
begin T := Self.StatusCode; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseTitle_W(Self: TWebResponse; const T: AnsiString);
begin Self.Title := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseTitle_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.Title; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseDerivedFrom_W(Self: TWebResponse; const T: AnsiString);
begin Self.DerivedFrom := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseDerivedFrom_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.DerivedFrom; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentVersion_W(Self: TWebResponse; const T: AnsiString);
begin Self.ContentVersion := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentVersion_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.ContentVersion; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentType_W(Self: TWebResponse; const T: AnsiString);
begin Self.ContentType := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentType_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.ContentType; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentEncoding_W(Self: TWebResponse; const T: AnsiString);
begin Self.ContentEncoding := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseContentEncoding_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.ContentEncoding; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLocation_W(Self: TWebResponse; const T: AnsiString);
begin Self.Location := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseLocation_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.Location; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseAllow_W(Self: TWebResponse; const T: AnsiString);
begin Self.Allow := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseAllow_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.Allow; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseRealm_W(Self: TWebResponse; const T: AnsiString);
begin Self.Realm := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseRealm_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.Realm; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseWWWAuthenticate_W(Self: TWebResponse; const T: AnsiString);
begin Self.WWWAuthenticate := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseWWWAuthenticate_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.WWWAuthenticate; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseServer_W(Self: TWebResponse; const T: AnsiString);
begin Self.Server := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseServer_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.Server; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseReasonString_W(Self: TWebResponse; const T: AnsiString);
begin Self.ReasonString := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseReasonString_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.ReasonString; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseVersion_W(Self: TWebResponse; const T: AnsiString);
begin Self.Version := T; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseVersion_R(Self: TWebResponse; var T: AnsiString);
begin T := Self.Version; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseHTTPRequest_R(Self: TWebResponse; var T: TWebRequest);
begin T := Self.HTTPRequest; end;

(*----------------------------------------------------------------------------*)
procedure TWebResponseCookies_R(Self: TWebResponse; var T: TCookieCollection);
begin T := Self.Cookies; end;

(*----------------------------------------------------------------------------*)
procedure TCookieCollectionItems_W(Self: TCookieCollection; const T: TCookie; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieCollectionItems_R(Self: TCookieCollection; var T: TCookie; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCookieCollectionWebResponse_R(Self: TCookieCollection; var T: TWebResponse);
begin T := Self.WebResponse; end;

(*----------------------------------------------------------------------------*)
procedure TCookieHeaderValue_R(Self: TCookie; var T: AnsiString);
begin T := Self.HeaderValue; end;

(*----------------------------------------------------------------------------*)
procedure TCookieSecure_W(Self: TCookie; const T: Boolean);
begin Self.Secure := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieSecure_R(Self: TCookie; var T: Boolean);
begin T := Self.Secure; end;

(*----------------------------------------------------------------------------*)
procedure TCookieExpires_W(Self: TCookie; const T: TDateTime);
begin Self.Expires := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieExpires_R(Self: TCookie; var T: TDateTime);
begin T := Self.Expires; end;

(*----------------------------------------------------------------------------*)
procedure TCookiePath_W(Self: TCookie; const T: AnsiString);
begin Self.Path := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookiePath_R(Self: TCookie; var T: AnsiString);
begin T := Self.Path; end;

(*----------------------------------------------------------------------------*)
procedure TCookieDomain_W(Self: TCookie; const T: AnsiString);
begin Self.Domain := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieDomain_R(Self: TCookie; var T: AnsiString);
begin T := Self.Domain; end;

(*----------------------------------------------------------------------------*)
procedure TCookieValue_W(Self: TCookie; const T: AnsiString);
begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieValue_R(Self: TCookie; var T: AnsiString);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TCookieName_W(Self: TCookie; const T: AnsiString);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TCookieName_R(Self: TCookie; var T: AnsiString);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFileContentType_R(Self: TAbstractWebRequestFile; var T: AnsiString);
begin T := Self.ContentType; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFileStream_R(Self: TAbstractWebRequestFile; var T: TStream);
begin T := Self.Stream; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFileFileName_R(Self: TAbstractWebRequestFile; var T: AnsiString);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFileFieldName_R(Self: TAbstractWebRequestFile; var T: AnsiString);
begin T := Self.FieldName; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFilesCount_R(Self: TAbstractWebRequestFiles; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractWebRequestFilesItems_R(Self: TAbstractWebRequestFiles; var T: TAbstractWebRequestFile; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestFiles_R(Self: TWebRequest; var T: TAbstractWebRequestFiles);
begin T := Self.Files; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestInternalScriptName_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.InternalScriptName; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestInternalPathInfo_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.InternalPathInfo; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestServerPort_R(Self: TWebRequest; var T: Integer);
begin T := Self.ServerPort; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestScriptName_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.ScriptName; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestRemoteHost_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.RemoteHost; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestRemoteAddr_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.RemoteAddr; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestTitle_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.Title; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestExpires_R(Self: TWebRequest; var T: TDateTime);
begin T := Self.Expires; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestDerivedFrom_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.DerivedFrom; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestConnection_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.Connection; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContent_R(Self: TWebRequest; var T: string);
begin T := Self.Content; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestRawContent_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.RawContent; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentVersion_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.ContentVersion; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentLength_R(Self: TWebRequest; var T: Integer);
begin T := Self.ContentLength; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentType_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.ContentType; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentEncoding_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.ContentEncoding; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestUserAgent_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.UserAgent; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestReferer_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.Referer; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestIfModifiedSince_R(Self: TWebRequest; var T: TDateTime);
begin T := Self.IfModifiedSince; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestHost_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.Host; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestFrom_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.From; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestAccept_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.Accept; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestDate_R(Self: TWebRequest; var T: TDateTime);
begin T := Self.Date; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestCookie_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.Cookie; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestCacheControl_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.CacheControl; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestAuthorization_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.Authorization; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestPathTranslated_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.PathTranslated; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestPathInfo_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.PathInfo; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestQuery_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.Query; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestURL_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.URL; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestProtocolVersion_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.ProtocolVersion; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestMethod_R(Self: TWebRequest; var T: AnsiString);
begin T := Self.Method; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestQueryFields_R(Self: TWebRequest; var T: TStrings);
begin T := Self.QueryFields; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestCookieFields_R(Self: TWebRequest; var T: TStrings);
begin T := Self.CookieFields; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentFields_R(Self: TWebRequest; var T: TStrings);
begin T := Self.ContentFields; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestContentParser_R(Self: TWebRequest; var T: TAbstractContentParser);
begin T := Self.ContentParser; end;

(*----------------------------------------------------------------------------*)
procedure TWebRequestMethodType_R(Self: TWebRequest; var T: TMethodType);
begin T := Self.MethodType; end;

(*----------------------------------------------------------------------------*)
Procedure TWebRequestExtractFields_P(Self: TWebRequest;  Separators, WhiteSpace : TSysCharSet; const Content : AnsiString; Strings : TStrings); overload;
Begin Self.ExtractFields(Separators, WhiteSpace, Content, Strings); END;

(*----------------------------------------------------------------------------*)
Procedure TWebRequestExtractFields_P(Self: TWebRequest;  Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings); overload;
Begin Self.ExtractFields(Separators, WhiteSpace, Content, Strings); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_HTTPApp_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@DosPathToUnixPath, 'DosPathToUnixPath', cdRegister);
 S.RegisterDelphiFunction(@HTTPDecode, 'HTTPDecode', cdRegister);
 S.RegisterDelphiFunction(@HTTPEncode, 'HTTPEncode', cdRegister);
 S.RegisterDelphiFunction(@HTMLEncode, 'HTMLEncode', cdRegister);
 S.RegisterDelphiFunction(@HTMLDecode, 'HTMLDecode', cdRegister);
 S.RegisterDelphiFunction(@ParseDate, 'ParseDate', cdRegister);
 S.RegisterDelphiFunction(@ExtractHTTPFields, 'ExtractHTTPFields', cdRegister);
// S.RegisterDelphiFunction(@ExtractHTTPFields, 'ExtractHTTPFields', cdRegister);
 S.RegisterDelphiFunction(@ExtractHeaderFields, 'ExtractHeaderFields', cdRegister);
 S.RegisterDelphiFunction(@ExtractHeaderFields, 'ExtractHeaderFields', cdRegister);
 S.RegisterDelphiFunction(@StatusString, 'StatusString', cdRegister);
 S.RegisterDelphiFunction(@UnixPathToDosPath, 'UnixPathToDosPath', cdRegister);
 S.RegisterDelphiFunction(@MonthStr, 'MonthStr', cdRegister);
 S.RegisterDelphiFunction(@DayOfWeekStr, 'DayOfWeekStr', cdRegister);
 S.RegisterDelphiFunction(@EncodingFromContentType, 'EncodingFromContentType', cdRegister);
 S.RegisterDelphiFunction(@EncodingGetString, 'EncodingGetString', cdRegister);
 S.RegisterDelphiFunction(@EncodingGetBytes, 'EncodingGetBytes', cdRegister);
 S.RegisterDelphiFunction(@RegisterContentParser, 'RegisterContentParser', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebResponse(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebResponse) do
  begin
    RegisterConstructor(@TWebResponse.Create, 'Create');
    RegisterMethod(@TWebResponse.GetCustomHeader, 'GetCustomHeader');
    RegisterVirtualAbstractMethod(TWebResponse, @TWebResponse.SendResponse, 'SendResponse');
    RegisterVirtualAbstractMethod(TWebResponse, @TWebResponse.SendRedirect, 'SendRedirect');
    RegisterVirtualAbstractMethod(TWebResponse, @TWebResponse.SendStream, 'SendStream');
    RegisterVirtualMethod(@TWebResponse.Sent, 'Sent');
    RegisterMethod(@TWebResponse.SetCookieField, 'SetCookieField');
    RegisterMethod(@TWebResponse.SetCustomHeader, 'SetCustomHeader');
    RegisterPropertyHelper(@TWebResponseCookies_R,nil,'Cookies');
    RegisterPropertyHelper(@TWebResponseHTTPRequest_R,nil,'HTTPRequest');
    RegisterPropertyHelper(@TWebResponseVersion_R,@TWebResponseVersion_W,'Version');
    RegisterPropertyHelper(@TWebResponseReasonString_R,@TWebResponseReasonString_W,'ReasonString');
    RegisterPropertyHelper(@TWebResponseServer_R,@TWebResponseServer_W,'Server');
    RegisterPropertyHelper(@TWebResponseWWWAuthenticate_R,@TWebResponseWWWAuthenticate_W,'WWWAuthenticate');
    RegisterPropertyHelper(@TWebResponseRealm_R,@TWebResponseRealm_W,'Realm');
    RegisterPropertyHelper(@TWebResponseAllow_R,@TWebResponseAllow_W,'Allow');
    RegisterPropertyHelper(@TWebResponseLocation_R,@TWebResponseLocation_W,'Location');
    RegisterPropertyHelper(@TWebResponseContentEncoding_R,@TWebResponseContentEncoding_W,'ContentEncoding');
    RegisterPropertyHelper(@TWebResponseContentType_R,@TWebResponseContentType_W,'ContentType');
    RegisterPropertyHelper(@TWebResponseContentVersion_R,@TWebResponseContentVersion_W,'ContentVersion');
    RegisterPropertyHelper(@TWebResponseDerivedFrom_R,@TWebResponseDerivedFrom_W,'DerivedFrom');
    RegisterPropertyHelper(@TWebResponseTitle_R,@TWebResponseTitle_W,'Title');
    RegisterPropertyHelper(@TWebResponseStatusCode_R,@TWebResponseStatusCode_W,'StatusCode');
    RegisterPropertyHelper(@TWebResponseContentLength_R,@TWebResponseContentLength_W,'ContentLength');
    RegisterPropertyHelper(@TWebResponseDate_R,@TWebResponseDate_W,'Date');
    RegisterPropertyHelper(@TWebResponseExpires_R,@TWebResponseExpires_W,'Expires');
    RegisterPropertyHelper(@TWebResponseLastModified_R,@TWebResponseLastModified_W,'LastModified');
    RegisterPropertyHelper(@TWebResponseRawContent_R,@TWebResponseRawContent_W,'RawContent');
    RegisterPropertyHelper(@TWebResponseContent_R,@TWebResponseContent_W,'Content');
    RegisterPropertyHelper(@TWebResponseContentStream_R,@TWebResponseContentStream_W,'ContentStream');
    RegisterPropertyHelper(@TWebResponseLogMessage_R,@TWebResponseLogMessage_W,'LogMessage');
    RegisterPropertyHelper(@TWebResponseCustomHeaders_R,@TWebResponseCustomHeaders_W,'CustomHeaders');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCookieCollection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCookieCollection) do
  begin
    RegisterConstructor(@TCookieCollection.Create, 'Create');
    RegisterMethod(@TCookieCollection.Add, 'Add');
    RegisterPropertyHelper(@TCookieCollectionWebResponse_R,nil,'WebResponse');
    RegisterPropertyHelper(@TCookieCollectionItems_R,@TCookieCollectionItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCookie(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCookie) do
  begin
    RegisterPropertyHelper(@TCookieName_R,@TCookieName_W,'Name');
    RegisterPropertyHelper(@TCookieValue_R,@TCookieValue_W,'Value');
    RegisterPropertyHelper(@TCookieDomain_R,@TCookieDomain_W,'Domain');
    RegisterPropertyHelper(@TCookiePath_R,@TCookiePath_W,'Path');
    RegisterPropertyHelper(@TCookieExpires_R,@TCookieExpires_W,'Expires');
    RegisterPropertyHelper(@TCookieSecure_R,@TCookieSecure_W,'Secure');
    RegisterPropertyHelper(@TCookieHeaderValue_R,nil,'HeaderValue');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractWebRequestFile(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractWebRequestFile) do
  begin
    RegisterPropertyHelper(@TAbstractWebRequestFileFieldName_R,nil,'FieldName');
    RegisterPropertyHelper(@TAbstractWebRequestFileFileName_R,nil,'FileName');
    RegisterPropertyHelper(@TAbstractWebRequestFileStream_R,nil,'Stream');
    RegisterPropertyHelper(@TAbstractWebRequestFileContentType_R,nil,'ContentType');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractWebRequestFiles(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractWebRequestFiles) do
  begin
    RegisterPropertyHelper(@TAbstractWebRequestFilesItems_R,nil,'Items');
    RegisterPropertyHelper(@TAbstractWebRequestFilesCount_R,nil,'Count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TContentParser(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TContentParser) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractContentParser(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractContentParser) do
  begin
    RegisterVirtualConstructor(@TAbstractContentParser.Create, 'Create');
    RegisterVirtualMethod(@TAbstractContentParser.CanParse, 'CanParse');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWebRequest(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebRequest) do
  begin
    RegisterConstructor(@TWebRequest.Create, 'Create');
    RegisterVirtualAbstractMethod(TWebRequest, @TWebRequest.ReadClient, 'ReadClient');
    RegisterVirtualAbstractMethod(TWebRequest, @TWebRequest.ReadString, 'ReadString');
    RegisterMethod(@TWebRequest.ReadUnicodeString, 'ReadUnicodeString');
    RegisterVirtualAbstractMethod(TWebRequest, @TWebRequest.TranslateURI, 'TranslateURI');
    RegisterVirtualAbstractMethod(TWebRequest, @TWebRequest.WriteClient, 'WriteClient');
    RegisterVirtualAbstractMethod(TWebRequest, @TWebRequest.WriteString, 'WriteString');
    RegisterVirtualAbstractMethod(TWebRequest, @TWebRequest.WriteHeaders, 'WriteHeaders');
    RegisterMethod(@TWebRequestExtractFields_P, 'ExtractFields');
    RegisterMethod(@TWebRequestExtractFields_P, 'ExtractFields');
    RegisterMethod(@TWebRequest.ExtractContentFields, 'ExtractContentFields');
    RegisterMethod(@TWebRequest.ExtractCookieFields, 'ExtractCookieFields');
    RegisterMethod(@TWebRequest.ExtractQueryFields, 'ExtractQueryFields');
    RegisterVirtualAbstractMethod(TWebRequest, @TWebRequest.GetFieldByName, 'GetFieldByName');
    RegisterPropertyHelper(@TWebRequestMethodType_R,nil,'MethodType');
    RegisterPropertyHelper(@TWebRequestContentParser_R,nil,'ContentParser');
    RegisterPropertyHelper(@TWebRequestContentFields_R,nil,'ContentFields');
    RegisterPropertyHelper(@TWebRequestCookieFields_R,nil,'CookieFields');
    RegisterPropertyHelper(@TWebRequestQueryFields_R,nil,'QueryFields');
    RegisterPropertyHelper(@TWebRequestMethod_R,nil,'Method');
    RegisterPropertyHelper(@TWebRequestProtocolVersion_R,nil,'ProtocolVersion');
    RegisterPropertyHelper(@TWebRequestURL_R,nil,'URL');
    RegisterPropertyHelper(@TWebRequestQuery_R,nil,'Query');
    RegisterPropertyHelper(@TWebRequestPathInfo_R,nil,'PathInfo');
    RegisterPropertyHelper(@TWebRequestPathTranslated_R,nil,'PathTranslated');
    RegisterPropertyHelper(@TWebRequestAuthorization_R,nil,'Authorization');
    RegisterPropertyHelper(@TWebRequestCacheControl_R,nil,'CacheControl');
    RegisterPropertyHelper(@TWebRequestCookie_R,nil,'Cookie');
    RegisterPropertyHelper(@TWebRequestDate_R,nil,'Date');
    RegisterPropertyHelper(@TWebRequestAccept_R,nil,'Accept');
    RegisterPropertyHelper(@TWebRequestFrom_R,nil,'From');
    RegisterPropertyHelper(@TWebRequestHost_R,nil,'Host');
    RegisterPropertyHelper(@TWebRequestIfModifiedSince_R,nil,'IfModifiedSince');
    RegisterPropertyHelper(@TWebRequestReferer_R,nil,'Referer');
    RegisterPropertyHelper(@TWebRequestUserAgent_R,nil,'UserAgent');
    RegisterPropertyHelper(@TWebRequestContentEncoding_R,nil,'ContentEncoding');
    RegisterPropertyHelper(@TWebRequestContentType_R,nil,'ContentType');
    RegisterPropertyHelper(@TWebRequestContentLength_R,nil,'ContentLength');
    RegisterPropertyHelper(@TWebRequestContentVersion_R,nil,'ContentVersion');
    RegisterPropertyHelper(@TWebRequestRawContent_R,nil,'RawContent');
    RegisterPropertyHelper(@TWebRequestContent_R,nil,'Content');
    RegisterPropertyHelper(@TWebRequestConnection_R,nil,'Connection');
    RegisterPropertyHelper(@TWebRequestDerivedFrom_R,nil,'DerivedFrom');
    RegisterPropertyHelper(@TWebRequestExpires_R,nil,'Expires');
    RegisterPropertyHelper(@TWebRequestTitle_R,nil,'Title');
    RegisterPropertyHelper(@TWebRequestRemoteAddr_R,nil,'RemoteAddr');
    RegisterPropertyHelper(@TWebRequestRemoteHost_R,nil,'RemoteHost');
    RegisterPropertyHelper(@TWebRequestScriptName_R,nil,'ScriptName');
    RegisterPropertyHelper(@TWebRequestServerPort_R,nil,'ServerPort');
    RegisterPropertyHelper(@TWebRequestInternalPathInfo_R,nil,'InternalPathInfo');
    RegisterPropertyHelper(@TWebRequestInternalScriptName_R,nil,'InternalScriptName');
    RegisterPropertyHelper(@TWebRequestFiles_R,nil,'Files');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_HTTPApp(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWebResponse) do
  with CL.Add(TAbstractContentParser) do
  with CL.Add(TAbstractWebRequestFiles) do
  RIRegister_TWebRequest(CL);
  RIRegister_TAbstractContentParser(CL);
  RIRegister_TContentParser(CL);
  with CL.Add(TAbstractWebRequestFile) do
  RIRegister_TAbstractWebRequestFiles(CL);
  RIRegister_TAbstractWebRequestFile(CL);
  RIRegister_TCookie(CL);
  RIRegister_TCookieCollection(CL);
  RIRegister_TWebResponse(CL);
end;

 
 
{ TPSImport_HTTPApp }
(*----------------------------------------------------------------------------*)
procedure TPSImport_HTTPApp.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_HTTPApp(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_HTTPApp.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_HTTPApp(ri);
  RIRegister_HTTPApp_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
